{"code":"import { computed, ref, toRaw } from \"vue\";\nexport const useForm = (defaultForm) => {\n    const remountForm = ref(0);\n    const formData = ref(defaultForm);\n    const fieldError = ref({});\n    const defaultFormRaw = window.structuredClone(toRaw(defaultForm));\n    const fieldErrorTexts = computed(() => Object.values(fieldError.value));\n    const setFormData = (data) => {\n        formData.value = { ...data };\n        remountForm.value++;\n    };\n    const resetDefaultForm = () => setFormData(defaultFormRaw);\n    const validateForm = (validatorModel) => {\n        fieldError.value = {};\n        const validatedForm = validatorModel.safeParse(formData.value);\n        if (!validatedForm.success) {\n            fieldError.value = Object.entries(validatedForm.error.formErrors.fieldErrors).reduce((acc, [key, value]) => {\n                if (!value?.length)\n                    return acc;\n                acc[key] = value[0];\n                return acc;\n            }, {});\n            return false;\n        }\n        setFormData(validatedForm.data);\n        return true;\n    };\n    return {\n        remountForm,\n        formData,\n        fieldError,\n        fieldErrorTexts,\n        resetDefaultForm,\n        validateForm,\n        setFormData\n    };\n};\n","references":["/Users/rasmus/Projects/useForm/node_modules/vue/dist/vue.d.ts"],"dtsmap":{"name":"/Users/rasmus/Projects/useForm/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/AppForm/useForm.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"useForm.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/AppForm/useForm.ts\"],\"names\":[],\"mappings\":\"AACA,eAAO,MAAM,OAAO;;;;;;;;CAqCnB,CAAC\"}"},"dts":{"name":"/Users/rasmus/Projects/useForm/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/AppForm/useForm.d.ts","writeByteOrderMark":false,"text":"export declare const useForm: (defaultForm: any) => {\n    remountForm: import(\"vue\").Ref<number>;\n    formData: any;\n    fieldError: import(\"vue\").Ref<{}>;\n    fieldErrorTexts: import(\"vue\").ComputedRef<unknown[]>;\n    resetDefaultForm: () => void;\n    validateForm: (validatorModel: any) => boolean;\n    setFormData: (data: any) => void;\n};\n//# sourceMappingURL=useForm.d.ts.map"}}
