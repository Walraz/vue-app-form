{"code":"import QBtn from 'quasar/src/components/btn/QBtn.js';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, renderSlot as _renderSlot, resolveDynamicComponent as _resolveDynamicComponent, toHandlers as _toHandlers, mergeProps as _mergeProps, createBlock as _createBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createVNode as _createVNode, unref as _unref } from \"vue\";\nconst _hoisted_1 = {\n    class: /* @__PURE__ */ _normalizeClass(`row q-col-gutter-lg`)\n};\nimport { useForm } from \"./useForm\";\nimport set from \"lodash.set\";\nimport get from \"lodash.get\";\nimport { ref, toRaw, watch } from \"vue\";\nimport QForm from 'quasar/src/components/form/QForm.js';\nexport default /* @__PURE__ */ _defineComponent({\n    __name: \"AppForm\",\n    props: {\n        wrapperComponent: { default: () => \"div\" },\n        layoutSlots: { default: () => 1 },\n        colGutter: { default: () => \"sm\" },\n        modelValue: {},\n        modelSchema: {},\n        schema: {},\n        actionButtonProps: { default: () => ({}) }\n    },\n    emits: [\"submit\", \"update:modelValue\", \"reset\"],\n    setup(__props, { emit }) {\n        const props = __props;\n        const form = ref();\n        const { resetDefaultForm, validateForm, formData, fieldError } = useForm(props.modelValue);\n        watch(formData, (value) => emit(\"update:modelValue\", value), {\n            deep: true\n        });\n        const getterScope = (scope) => {\n            return get(formData.value, scope);\n        };\n        const setterScope = (value, field) => {\n            set(formData.value, field.scope, field?.transform ? field?.transform(value) : value);\n            if (fieldError.value[field.scope]) {\n                validateForm(props.modelSchema);\n            }\n        };\n        const onSubmit = () => {\n            validateForm(props.modelSchema);\n            if (!validateForm(props.modelSchema))\n                return;\n            emit(\"submit\", toRaw(formData.value));\n        };\n        const onReset = () => {\n            resetDefaultForm();\n            form.value?.resetValidation();\n            emit(\"reset\");\n        };\n        const propsAndEvent = (field) => {\n            return {\n                bind: {\n                    ...field.componentProps,\n                    modelValue: getterScope(field.scope),\n                    error: Boolean(fieldError.value[field.scope]),\n                    errorMessage: fieldError.value[field.scope] || \"\"\n                },\n                on: {\n                    \"update:modelValue\": (v) => setterScope(v, field)\n                }\n            };\n        };\n        return (_ctx, _cache) => {\n            ;\n            return _openBlock(), _createBlock(_unref(QForm), {\n                onSubmit,\n                greedy: \"\",\n                onReset,\n                ref_key: \"form\",\n                ref: form\n            }, {\n                default: _withCtx(() => [\n                    (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.wrapperComponent), null, {\n                        default: _withCtx(() => [\n                            _createElementVNode(\"div\", _hoisted_1, [\n                                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.layoutSlots, (layoutSlot) => {\n                                    return _openBlock(), _createElementBlock(\"div\", {\n                                        class: \"col\",\n                                        key: layoutSlot\n                                    }, [\n                                        _createElementVNode(\"div\", {\n                                            class: _normalizeClass(`row q-col-gutter-${_ctx.colGutter}`)\n                                        }, [\n                                            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.schema.filter((x) => {\n                                                const slotPos = x.layoutSlot || 1;\n                                                if (slotPos > _ctx.layoutSlots)\n                                                    return 1 === layoutSlot;\n                                                return slotPos === layoutSlot;\n                                            }), (field) => {\n                                                return _openBlock(), _createElementBlock(\"div\", {\n                                                    key: field.scope,\n                                                    class: _normalizeClass(`col-${field.cols || \"auto\"}`)\n                                                }, [\n                                                    _renderSlot(_ctx.$slots, field.scope, {\n                                                        props: {\n                                                            setterScope,\n                                                            getterScope,\n                                                            scope: field.scope,\n                                                            ...propsAndEvent(field)\n                                                        }\n                                                    }, () => [\n                                                        (_openBlock(), _createBlock(_resolveDynamicComponent(field.component), _mergeProps(propsAndEvent(field).bind, _toHandlers(propsAndEvent(field).on)), null, 16))\n                                                    ])\n                                                ], 2);\n                                            }), 128))\n                                        ], 2)\n                                    ]);\n                                }), 128))\n                            ])\n                        ]),\n                        _: 3\n                    })),\n                    _renderSlot(_ctx.$slots, \"actions\", {\n                        props: { bind: { ..._ctx.actionButtonProps } }\n                    }, () => [\n                        _createVNode(QBtn, _mergeProps(_ctx.actionButtonProps, { type: \"reset\" }), {\n                            default: _withCtx(() => [\n                                _createTextVNode(\"TÃ¶m\")\n                            ]),\n                            _: 1\n                        }, 16),\n                        _createVNode(QBtn, _mergeProps(_ctx.actionButtonProps, {\n                            type: \"submit\",\n                            color: \"primary\"\n                        }), {\n                            default: _withCtx(() => [\n                                _createTextVNode(\"Spara\")\n                            ]),\n                            _: 1\n                        }, 16)\n                    ])\n                ]),\n                _: 3\n            }, 512);\n        };\n    }\n});\n","references":["/Users/rasmus/Projects/useForm/node_modules/quasar/src/components/btn/QBtn.js","/Users/rasmus/Projects/useForm/node_modules/vue/dist/vue.d.ts","/Users/rasmus/Projects/useForm/node_modules/vue/dist/vue.d.ts","/Users/rasmus/Projects/useForm/src/components/AppForm/useForm.ts","/Users/rasmus/Projects/useForm/node_modules/@types/lodash.set/index.d.ts","/Users/rasmus/Projects/useForm/node_modules/@types/lodash.get/index.d.ts","/Users/rasmus/Projects/useForm/node_modules/vue/dist/vue.d.ts","/Users/rasmus/Projects/useForm/node_modules/quasar/src/components/form/QForm.js"],"dtsmap":{"name":"/Users/rasmus/Projects/useForm/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/AppForm/AppForm.vue?vue&type=script&setup=true&lang.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"AppForm.vue?vue&type=script&setup=true&lang.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/AppForm/AppForm.vue?vue&type=script&setup=true&lang.ts\"],\"names\":[],\"mappings\":\";AAUA,wBAoIG\"}"},"dts":{"name":"/Users/rasmus/Projects/useForm/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/AppForm/AppForm.vue?vue&type=script&setup=true&lang.d.ts","writeByteOrderMark":false,"text":"declare const _default: any;\nexport default _default;\n//# sourceMappingURL=AppForm.vue?vue&type=script&setup=true&lang.d.ts.map"}}
